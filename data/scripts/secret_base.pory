text SecretBase_Text_TreeCanBeClimbed {
    "If some vines drop down, this tree can\n"
    "be climbed."
}

text SecretBase_Text_TreeUseSecretPower {
    "If some vines drop down, this tree can\n"
    "be climbed.\p"
    "Use the Secret Power?"
}

text SecretBase_Text_VineDroppedDown {
    "A thick vine dropped down!"
}

text SecretBase_Text_ClumpOfGrass {
    "If this clump of grass can be moved,\n"
    "it might be possible to go inside."
}

text SecretBase_Text_ClumpUseSecretPower {
    "If this clump of grass can be moved,\n"
    "it might be possible to go inside.\p"
    "Use the Secret Power?"
}

text SecretBase_Text_DiscoveredSmallEntrance {
    "Discovered a small entrance!"
}

raw `
    .include "data/text/secret_base_trainers.inc"
`

script SecretBase_EventScript_CheckEntrance {
    special(GetSecretBaseTypeInFrontOfPlayer)
    special(CheckPlayerHasSecretBase)
    if (var(VAR_RESULT) == TRUE) {
        checkpartymove(MOVE_SECRET_POWER)
        if (var(VAR_RESULT) == PARTY_SIZE) {
            lockall
            switch (var(VAR_0x8007)) {
                case SECRET_BASE_RED_CAVE:
                case SECRET_BASE_BROWN_CAVE:
                case SECRET_BASE_BLUE_CAVE:
                case SECRET_BASE_YELLOW_CAVE:
                    msgbox(SecretBase_Text_SmallIndentInWall)
                case SECRET_BASE_TREE:
                    msgbox(SecretBase_Text_TreeCanBeClimbed)
                case SECRET_BASE_SHRUB:
                    msgbox(SecretBase_Text_ClumpOfGrass)
            }
            releaseall
        } else {
            setfieldeffectargument(0, VAR_RESULT)
            setorcopyvar(VAR_0x8004, VAR_RESULT)
            lockall
            special(GetSecretBaseNearbyMapName)
            msgbox(SecretBase_Text_WouldYouLikeToMoveBases, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                closemessage
                releaseall
                return
            }
            msgbox(SecretBase_Text_AllDecorationsWillBeReturned, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                closemessage
                releaseall
                return
            }
            fadescreenswapbuffers(FADE_TO_BLACK)
            special(MoveOutOfSecretBaseFromOutside)
            closemessage
            fadescreenswapbuffers(FADE_FROM_BLACK)
            msgbox(SecretBase_Text_MovingCompletedUseSecretPower, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                closemessage
                releaseall
                return
            }
            bufferpartymonnick(0, VAR_0x8004)
            buffermovename(1, MOVE_SECRET_POWER)
            msgbox(Text_MonUsedFieldMove)
            closemessage
            switch (var(VAR_0x8007)) {
                case SECRET_BASE_RED_CAVE:
                case SECRET_BASE_BROWN_CAVE:
                case SECRET_BASE_BLUE_CAVE:
                case SECRET_BASE_YELLOW_CAVE:
                    goto(SecretBase_EventScript_CaveUseSecretPower)
                case SECRET_BASE_TREE:
                    goto(SecretBase_EventScript_TreeUseSecretPower)
                case SECRET_BASE_SHRUB:
                    goto(SecretBase_EventScript_ShrubUseSecretPower)
            }
        }
    } else {
        checkpartymove(MOVE_SECRET_POWER)
        setfieldeffectargument(0, VAR_RESULT)
        buffermovename(1, MOVE_SECRET_POWER)
        switch (var(VAR_0x8007)) {
            case SECRET_BASE_RED_CAVE:
            case SECRET_BASE_BROWN_CAVE:
            case SECRET_BASE_BLUE_CAVE:
            case SECRET_BASE_YELLOW_CAVE:
                lockall
                if (var(VAR_RESULT) == PARTY_SIZE) {
                    msgbox(SecretBase_Text_SmallIndentInWall)
                    releaseall
                } else {
                    bufferpartymonnick(0, VAR_RESULT)
                    msgbox(SecretBase_Text_IndentUseSecretPower, MSGBOX_YESNO)
                    if (var(VAR_RESULT) == NO) {
                        closemessage
                        releaseall
                        return
                    }
                    msgbox(Text_MonUsedFieldMove)
                    closemessage
                    dofieldeffect(FLDEFF_USE_SECRET_POWER_CAVE)
                    waitstate
                    msgbox(SecretBase_Text_DiscoveredSmallCavern)
                    goto(SecretBase_EventScript_InitSecretBase)
                }
            case SECRET_BASE_TREE:
                lockall
                if (var(VAR_RESULT) == PARTY_SIZE) {
                    msgbox(SecretBase_Text_TreeCanBeClimbed)
                    releaseall
                } else {
                    bufferpartymonnick(0, VAR_RESULT)
                    msgbox(SecretBase_Text_TreeUseSecretPower, MSGBOX_YESNO)
                    if (var(VAR_RESULT) == NO) {
                        closemessage
                        releaseall
                        return
                    }
                    msgbox(Text_MonUsedFieldMove)
                    closemessage
                    dofieldeffect(FLDEFF_USE_SECRET_POWER_TREE)
                    waitstate
                    msgbox(SecretBase_Text_VineDroppedDown)
                    goto(SecretBase_EventScript_InitSecretBase)
                }
            case SECRET_BASE_SHRUB:
                lockall
                if (var(VAR_RESULT) == PARTY_SIZE) {
                    msgbox(SecretBase_Text_ClumpOfGrass)
                    releaseall
                } else {
                    bufferpartymonnick(0, VAR_RESULT)
                    msgbox(SecretBase_Text_ClumpUseSecretPower, MSGBOX_YESNO)
                    if (var(VAR_RESULT) == NO) {
                        closemessage
                        releaseall
                        return
                    }
                    msgbox(Text_MonUsedFieldMove)
                    closemessage
                    dofieldeffect(FLDEFF_USE_SECRET_POWER_SHRUB)
                    waitstate
                    msgbox(SecretBase_Text_DiscoveredSmallEntrance)
                    goto(SecretBase_EventScript_InitSecretBase)
                }
        }
    }
}

script SecretBase_EventScript_CaveUseSecretPower {
    lockall
    dofieldeffect(FLDEFF_USE_SECRET_POWER_CAVE)
    waitstate
    msgbox(SecretBase_Text_DiscoveredSmallCavern)
    goto(SecretBase_EventScript_InitSecretBase)
}

script SecretBase_EventScript_TreeUseSecretPower {
    lockall
    dofieldeffect(FLDEFF_USE_SECRET_POWER_TREE)
    waitstate
    msgbox(SecretBase_Text_VineDroppedDown)
    goto(SecretBase_EventScript_InitSecretBase)
}

script SecretBase_EventScript_ShrubUseSecretPower {
    lockall
    dofieldeffect(FLDEFF_USE_SECRET_POWER_SHRUB)
    waitstate
    msgbox(SecretBase_Text_DiscoveredSmallEntrance)
    goto(SecretBase_EventScript_InitSecretBase)
}

script SecretBase_EventScript_InitSecretBase {
    closemessage
    playse(SE_EXIT)
    setvar(VAR_INIT_SECRET_BASE, 0)
    setflag(FLAG_DECORATION_0)
    special(SetPlayerSecretBase)
    special(EnterSecretBase)
    setvar(VAR_0x8004, 0)
    setvar(VAR_0x8005, 0)
    special(InitSecretBaseDecorationSprites)
    setvar(VAR_SECRET_BASE_INITIALIZED, 1)
    waitstate
}

script SecretBase_EventScript_FirstEntrance {
    applymovement(OBJ_EVENT_ID_PLAYER, SecretBase_Movement_EnterBase)
    waitmovement(0)
    setvar(VAR_INIT_SECRET_BASE, 1)
    msgbox(SecretBase_Text_WantToMakeYourSecretBaseHere, MSGBOX_YESNO)
    if (var(VAR_RESULT) == YES) {
        closemessage
        setflag(FLAG_RECEIVED_SECRET_POWER)
        special(EnterNewlyCreatedSecretBase)
        waitstate
    } else {
        closemessage
        playse(SE_EXIT)
        special(ClearAndLeaveSecretBase)
    }
}

movement SecretBase_Movement_EnterBase {
    walk_up * 2
    walk_up
}

script SecretBase_EventScript_Enter {
    lockall
    setvar(VAR_INIT_SECRET_BASE, 1)
    playse(SE_EXIT)
    special(IsCurSecretBaseOwnedByAnotherPlayer)
    if (var(VAR_RESULT) == FALSE) {
        setflag(FLAG_DECORATION_0)
    } else {
        clearflag(FLAG_DECORATION_0)
    }
    special(EnterSecretBase)
    setvar(VAR_SECRET_BASE_INITIALIZED, 0)
    waitstate
}

script SecretBase_EventScript_SetDecorationFlags {
    setflag(FLAG_DECORATION_1)
    setflag(FLAG_DECORATION_2)
    setflag(FLAG_DECORATION_3)
    setflag(FLAG_DECORATION_4)
    setflag(FLAG_DECORATION_5)
    setflag(FLAG_DECORATION_6)
    setflag(FLAG_DECORATION_7)
    setflag(FLAG_DECORATION_8)
    setflag(FLAG_DECORATION_9)
    setflag(FLAG_DECORATION_10)
    setflag(FLAG_DECORATION_11)
    setflag(FLAG_DECORATION_12)
    setflag(FLAG_DECORATION_13)
    setflag(FLAG_DECORATION_14)
}

script SecretBase_EventScript_InitDecorations {
    setvar(VAR_0x8004, 0)
    setvar(VAR_0x8005, 0)
    special(InitSecretBaseDecorationSprites)
    setvar(VAR_SECRET_BASE_INITIALIZED, 1)
}

script SecretBase_EventScript_SetDecoration {
    setvar(VAR_0x8005, 0)
    special(SetDecoration)
}

script SecretBase_EventScript_PutAwayDecoration {
    setvar(VAR_0x8004, 0)
    special(PutAwayDecorationIteration)
    while (var(VAR_RESULT) != 1) {
        addvar(VAR_0x8004, 1)
        if (var(VAR_0x8005) != 0) {
            removeobject(VAR_0x8006)
            setflag(VAR_0x8005)  // UB: VAR_0x8005 is set to a flag by PutAwayDecorationIteration, but ScrCmd_setflag doesn't use VarGet
        }
        special(PutAwayDecorationIteration)
    }
}

script SecretBase_EventScript_RecordMixTrainer {
    special(GetSecretBaseOwnerAndState)
    // VAR_RESULT is initially set by GetSecretBaseOwnerAndState
    switch (var(VAR_0x8004)) {
        case 0:
            lock
            faceplayer
            if (!flag(FLAG_SYS_GAME_CLEAR)) {
                msgbox(SecretBase_Text_Trainer0PreChampion)
                release
                return
            }
            if (var(VAR_RESULT) == 1) {
                msgbox(SecretBase_Text_Trainer0PostBattle)
                release
                return
            }
            msgbox(SecretBase_Text_Trainer0Intro, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                goto(SecretBase_EventScript_Trainer0DeclineBattle)
            }
            setvar(VAR_RESULT, 1)
            special(SetBattledOwnerFromResult)
            call(Common_EventScript_SaveGame)
            if (var(VAR_RESULT) == 0) {
                goto(SecretBase_EventScript_Trainer0DeclineBattle)
            }
            msgbox(SecretBase_Text_Trainer0AcceptBattle)
            goto(SecretBase_EventScript_BattleTrainer)
        case 1:
            lock
            faceplayer
            if (!flag(FLAG_SYS_GAME_CLEAR)) {
                msgbox(SecretBase_Text_Trainer1PreChampion)
                release
                return
            }
            if (var(VAR_RESULT) == 1) {
                msgbox(SecretBase_Text_Trainer1PostBattle)
                release
                return
            }
            msgbox(SecretBase_Text_Trainer1Intro, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                goto(SecretBase_EventScript_Trainer1DeclineBattle)
            }
            setvar(VAR_RESULT, 1)
            special(SetBattledOwnerFromResult)
            call(Common_EventScript_SaveGame)
            if (var(VAR_RESULT) == 0) {
                goto(SecretBase_EventScript_Trainer1DeclineBattle)
            }
            msgbox(SecretBase_Text_Trainer1AcceptBattle)
            goto(SecretBase_EventScript_BattleTrainer)
        case 2:
            lock
            faceplayer
            if (!flag(FLAG_SYS_GAME_CLEAR)) {
                msgbox(SecretBase_Text_Trainer2PreChampion)
                release
                return
            }
            if (var(VAR_RESULT) == 1) {
                msgbox(SecretBase_Text_Trainer2PostBattle)
                release
                return
            }
            msgbox(SecretBase_Text_Trainer2Intro, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                goto(SecretBase_EventScript_Trainer2DeclineBattle)
            }
            setvar(VAR_RESULT, 1)
            special(SetBattledOwnerFromResult)
            call(Common_EventScript_SaveGame)
            if (var(VAR_RESULT) == 0) {
                goto(SecretBase_EventScript_Trainer2DeclineBattle)
            }
            msgbox(SecretBase_Text_Trainer2AcceptBattle)
            goto(SecretBase_EventScript_BattleTrainer)
        case 3:
            lock
            faceplayer
            if (!flag(FLAG_SYS_GAME_CLEAR)) {
                msgbox(SecretBase_Text_Trainer3PreChampion)
                release
                return
            }
            if (var(VAR_RESULT) == 1) {
                msgbox(SecretBase_Text_Trainer3PostBattle)
                release
                return
            }
            msgbox(SecretBase_Text_Trainer3Intro, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                goto(SecretBase_EventScript_Trainer3DeclineBattle)
            }
            setvar(VAR_RESULT, 1)
            special(SetBattledOwnerFromResult)
            call(Common_EventScript_SaveGame)
            if (var(VAR_RESULT) == 0) {
                goto(SecretBase_EventScript_Trainer3DeclineBattle)
            }
            msgbox(SecretBase_Text_Trainer3AcceptBattle)
            goto(SecretBase_EventScript_BattleTrainer)
        case 4:
            lock
            faceplayer
            if (!flag(FLAG_SYS_GAME_CLEAR)) {
                msgbox(SecretBase_Text_Trainer4PreChampion)
                release
                return
            }
            if (var(VAR_RESULT) == 1) {
                msgbox(SecretBase_Text_Trainer4PostBattle)
                release
                return
            }
            msgbox(SecretBase_Text_Trainer4Intro, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                goto(SecretBase_EventScript_Trainer4DeclineBattle)
            }
            setvar(VAR_RESULT, 1)
            special(SetBattledOwnerFromResult)
            call(Common_EventScript_SaveGame)
            if (var(VAR_RESULT) == 0) {
                goto(SecretBase_EventScript_Trainer4DeclineBattle)
            }
            msgbox(SecretBase_Text_Trainer4AcceptBattle)
            goto(SecretBase_EventScript_BattleTrainer)
        case 5:
            lock
            faceplayer
            if (!flag(FLAG_SYS_GAME_CLEAR)) {
                msgbox(SecretBase_Text_Trainer5PreChampion)
                release
                return
            }
            if (var(VAR_RESULT) == 1) {
                msgbox(SecretBase_Text_Trainer5PostBattle)
                release
                return
            }
            msgbox(SecretBase_Text_Trainer5Intro, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                goto(SecretBase_EventScript_Trainer5DeclineBattle)
            }
            setvar(VAR_RESULT, 1)
            special(SetBattledOwnerFromResult)
            call(Common_EventScript_SaveGame)
            if (var(VAR_RESULT) == 0) {
                goto(SecretBase_EventScript_Trainer5DeclineBattle)
            }
            msgbox(SecretBase_Text_Trainer5AcceptBattle)
            goto(SecretBase_EventScript_BattleTrainer)
        case 6:
            lock
            faceplayer
            if (!flag(FLAG_SYS_GAME_CLEAR)) {
                msgbox(SecretBase_Text_Trainer6PreChampion)
                release
                return
            }
            if (var(VAR_RESULT) == 1) {
                msgbox(SecretBase_Text_Trainer6PostBattle)
                release
                return
            }
            msgbox(SecretBase_Text_Trainer6Intro, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                goto(SecretBase_EventScript_Trainer6DeclineBattle)
            }
            setvar(VAR_RESULT, 1)
            special(SetBattledOwnerFromResult)
            call(Common_EventScript_SaveGame)
            if (var(VAR_RESULT) == 0) {
                goto(SecretBase_EventScript_Trainer6DeclineBattle)
            }
            msgbox(SecretBase_Text_Trainer6AcceptBattle)
            goto(SecretBase_EventScript_BattleTrainer)
        case 7:
            lock
            faceplayer
            if (!flag(FLAG_SYS_GAME_CLEAR)) {
                msgbox(SecretBase_Text_Trainer7PreChampion)
                release
                return
            }
            if (var(VAR_RESULT) == 1) {
                msgbox(SecretBase_Text_Trainer7PostBattle)
                release
                return
            }
            msgbox(SecretBase_Text_Trainer7Intro, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                goto(SecretBase_EventScript_Trainer7DeclineBattle)
            }
            setvar(VAR_RESULT, 1)
            special(SetBattledOwnerFromResult)
            call(Common_EventScript_SaveGame)
            if (var(VAR_RESULT) == 0) {
                goto(SecretBase_EventScript_Trainer7DeclineBattle)
            }
            msgbox(SecretBase_Text_Trainer7AcceptBattle)
            goto(SecretBase_EventScript_BattleTrainer)
        case 8:
            lock
            faceplayer
            if (!flag(FLAG_SYS_GAME_CLEAR)) {
                msgbox(SecretBase_Text_Trainer8PreChampion)
                release
                return
            }
            if (var(VAR_RESULT) == 1) {
                msgbox(SecretBase_Text_Trainer8PostBattle)
                release
                return
            }
            msgbox(SecretBase_Text_Trainer8Intro, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                goto(SecretBase_EventScript_Trainer8DeclineBattle)
            }
            setvar(VAR_RESULT, 1)
            special(SetBattledOwnerFromResult)
            call(Common_EventScript_SaveGame)
            if (var(VAR_RESULT) == 0) {
                goto(SecretBase_EventScript_Trainer8DeclineBattle)
            }
            msgbox(SecretBase_Text_Trainer8AcceptBattle)
            goto(SecretBase_EventScript_BattleTrainer)
        case 9:
            lock
            faceplayer
            if (!flag(FLAG_SYS_GAME_CLEAR)) {
                msgbox(SecretBase_Text_Trainer9PreChampion)
                release
                return
            }
            if (var(VAR_RESULT) == 1) {
                msgbox(SecretBase_Text_Trainer9PostBattle)
                release
                return
            }
            msgbox(SecretBase_Text_Trainer9Intro, MSGBOX_YESNO)
            if (var(VAR_RESULT) == NO) {
                goto(SecretBase_EventScript_Trainer9DeclineBattle)
            }
            setvar(VAR_RESULT, 1)
            special(SetBattledOwnerFromResult)
            call(Common_EventScript_SaveGame)
            if (var(VAR_RESULT) == 0) {
                goto(SecretBase_EventScript_Trainer9DeclineBattle)
            }
            msgbox(SecretBase_Text_Trainer9AcceptBattle)
            goto(SecretBase_EventScript_BattleTrainer)
    }
}

script SecretBase_EventScript_Trainer0DeclineBattle {
    special(DeclinedSecretBaseBattle)
    setvar(VAR_RESULT, 0)
    special(SetBattledOwnerFromResult)
    msgbox(SecretBase_Text_Trainer0DeclineBattle)
    release
}

script SecretBase_EventScript_Trainer1DeclineBattle {
    special(DeclinedSecretBaseBattle)
    setvar(VAR_RESULT, 0)
    special(SetBattledOwnerFromResult)
    msgbox(SecretBase_Text_Trainer1DeclineBattle)
    release
}

script SecretBase_EventScript_Trainer2DeclineBattle {
    special(DeclinedSecretBaseBattle)
    setvar(VAR_RESULT, 0)
    special(SetBattledOwnerFromResult)
    msgbox(SecretBase_Text_Trainer2DeclineBattle)
    release
}

script SecretBase_EventScript_Trainer3DeclineBattle {
    special(DeclinedSecretBaseBattle)
    setvar(VAR_RESULT, 0)
    special(SetBattledOwnerFromResult)
    msgbox(SecretBase_Text_Trainer3DeclineBattle)
    release
}

script SecretBase_EventScript_Trainer4DeclineBattle {
    special(DeclinedSecretBaseBattle)
    setvar(VAR_RESULT, 0)
    special(SetBattledOwnerFromResult)
    msgbox(SecretBase_Text_Trainer4DeclineBattle)
    release
}

script SecretBase_EventScript_Trainer5DeclineBattle {
    special(DeclinedSecretBaseBattle)
    setvar(VAR_RESULT, 0)
    special(SetBattledOwnerFromResult)
    msgbox(SecretBase_Text_Trainer5DeclineBattle)
    release
}

script SecretBase_EventScript_Trainer6DeclineBattle {
    special(DeclinedSecretBaseBattle)
    setvar(VAR_RESULT, 0)
    special(SetBattledOwnerFromResult)
    msgbox(SecretBase_Text_Trainer6DeclineBattle)
    release
}

script SecretBase_EventScript_Trainer7DeclineBattle {
    special(DeclinedSecretBaseBattle)
    setvar(VAR_RESULT, 0)
    special(SetBattledOwnerFromResult)
    msgbox(SecretBase_Text_Trainer7DeclineBattle)
    release
}

script SecretBase_EventScript_Trainer8DeclineBattle {
    special(DeclinedSecretBaseBattle)
    setvar(VAR_RESULT, 0)
    special(SetBattledOwnerFromResult)
    msgbox(SecretBase_Text_Trainer8DeclineBattle)
    release
}

script SecretBase_EventScript_Trainer9DeclineBattle {
    special(DeclinedSecretBaseBattle)
    setvar(VAR_RESULT, 0)
    special(SetBattledOwnerFromResult)
    msgbox(SecretBase_Text_Trainer9DeclineBattle)
    release
}

script SecretBase_EventScript_BattleTrainer {
    special(PrepSecretBaseBattleFlags)
    setvar(VAR_0x8004, SPECIAL_BATTLE_SECRET_BASE)
    setvar(VAR_0x8005, 0)
    special(DoSpecialTrainerBattle)
    waitstate
    switch (var(VAR_RESULT)) {
        case B_OUTCOME_DREW:
            special(DrewSecretBaseBattle)
        case B_OUTCOME_WON:
            special(WonSecretBaseBattle)
        case B_OUTCOME_LOST:
            special(LostSecretBaseBattle)
    }
    special(HealPlayerParty)
    release
}

raw `
    .include "data/scripts/secret_power_tm.inc"
`

script SecretBase_EventScript_DollInteract {
    special(CheckInteractedWithFriendsDollDecor)
}

script SecretBase_EventScript_CushionInteract {
    special(CheckInteractedWithFriendsCushionDecor)
}

text SecretBase_Text_AllDecorationsWillBeReturned {
    "All decorations and furniture in your\n"
    "Secret Base will be returned to your PC.\p"
    "Is that okay?"
}

text SecretBase_Text_WantToRegisterSecretBase {
    "Do you want to register\n"
    "{STR_VAR_1}'s Secret Base?"
}

text SecretBase_Text_AlreadyRegisteredDelete {
    "This data is already registered.\n"
    "Would you like to delete it?"
}

text SecretBase_Text_TooManyBasesDeleteSome {
    "Up to 10 locations can be registered.\p"
    "Delete a location if you want to\n"
    "register another location."
}

text SecretBase_Text_RegistrationCompleted {
    "Registration completed."
}

text SecretBase_Text_DataUnregistered {
    "Data has been unregistered."
}

text SecretBase_Text_BootUpPC {
    "{PLAYER} booted up the PC."
}

text SecretBase_Text_WhatWouldYouLikeToDo {
    "What would you like to do?"
}

text SecretBase_Text_RegistryInfo {
    "Once registered, a Secret Base will not\n"
    "disappear unless the other TRAINER\l"
    "moves it to a different location.\p"
    "If a Secret Base is deleted from the\n"
    "registered list, another one may take\l"
    "its place.\p"
    "Up to ten Secret Base locations\n"
    "may be registered."
}

text SecretBase_Text_BattleTowerShield {
    "A shield of {STR_VAR_2} that marks winning\n"
    "{STR_VAR_1} times in a row at the Battle Tower."
}

text SecretBase_Text_ToyTV {
    "A realistic toy TV. It could be easily\n"
    "mistaken for the real thing."
}

text SecretBase_Text_SeedotTV {
    "A toy TV shaped like a Seedot.\n"
    "It looks ready to roll away on its own…"
}

text SecretBase_Text_SkittyTV {
    "A toy TV shaped like a Skitty.\n"
    "It looks ready to stroll away…"
}

text SecretBase_Text_WouldYouLikeToMoveBases {
    "You may only make one Secret Base.\p"
    "Would you like to move from the Secret\n"
    "Base near {STR_VAR_1}?"
}

text SecretBase_Text_MovingCompletedUseSecretPower {
    "Moving completed.\p"
    "Would you like to use the Secret Power?"
}
